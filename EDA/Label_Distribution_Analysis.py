# -*- coding: utf-8 -*-
"""Labeling_Polarity-VideoGames.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TwFbnNNzC5iMCBufgl7yX_j2MjVXCoeH
"""

!pip install pyspark

from google.colab import drive
drive.mount('/content/drive')

from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.functions import pandas_udf, udf
from pyspark.sql.functions import when, col, split, explode, length
from pyspark.sql.types import ArrayType, StructType, StructField
from pyspark.sql.types import StringType, DoubleType, FloatType, IntegerType, BooleanType, LongType
from pyspark.ml.feature import Tokenizer, CountVectorizer, HashingTF, IDF
from pyspark.ml import Pipeline
import re
from textblob import TextBlob
import nltk
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import seaborn as sns

nltk.download('stopwords')
nltk.download('punkt')

spark = SparkSession.builder \
    .appName("Amazon Review and Meta Data EDA") \
    .config("spark.executor.memory", "4g") \
    .config("spark.driver.memory", "4g") \
    .config("spark.executor.cores", "2") \
    .getOrCreate()

df = spark.read.json(
    "/content/drive/MyDrive/CS777FinalProject/Data/VideoGameProcessed/split_files/part-00000-5eaf89fa-75fc-4633-ab39-87d2a8214a9e-c000.json")

def polarity(text):
    return round(TextBlob(text).sentiment.polarity, 4)

def subjectivity(text):
    return round(TextBlob(text).sentiment.subjectivity, 4)

pola_udf = udf(polarity, DoubleType())
subj_udf = udf(subjectivity, DoubleType())

df = df.withColumn('polarity', pola_udf('text')) \
       .withColumn('subjectivity', subj_udf('text'))
df.show()

df_pd = df.toPandas()  # Convert Spark DataFrame to pandas DataFrame

plt.figure(figsize=(10, 6))
sns.displot(data=df_pd, x='polarity', kde=True, bins=50)

# Now instead of plt.show(), save the figure
plt.title('Distribution of Polarity Score', fontsize=14)
plt.xlabel("[Polarity] Negative ------------------------- Positive", fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.gcf().savefig('polarity_distribution.png')  # Save the figure as a PNG file

# Since you've already converted the Spark DataFrame to a pandas DataFrame
print(df_pd['polarity'].describe())

plt.figure(figsize=(8, 6))
sns.boxenplot(data=df_pd, x='rating', y='polarity')
plt.title('Quantiles of Polarity Score by Ratings', fontsize=14)
plt.xlabel("Ratings", fontsize=12)
plt.ylabel("[Polarity] Negative ------------------------------ Positive", fontsize=12)

# Save the figure before showing it
plt.savefig('polarity_by_ratings.png')  # Saves the plot as a PNG file

plt.show()  # Display the plot

# Assuming df_pd is already your pandas DataFrame
grouped = df_pd.groupby('rating')['polarity']

# Calculate the descriptive statistics for each group
descriptive_stats = grouped.describe()

# Print out the numeric values of the quartiles for each rating
print(descriptive_stats)

quantiles = [0.25, 0.5, 0.75]  # Define the quantiles you want
quantile_values = grouped.quantile(quantiles)
print(quantile_values)

df_by_rating = df.groupBy('rating').agg(
    F.mean('polarity').alias('polarity'),
    F.mean('subjectivity').alias('subjectivity')
)
df_by_rating.show()

df_by_rating_pd = df_by_rating.toPandas()

plt.figure(figsize=(8, 8))
for idx, ratings in enumerate(df_by_rating_pd.index):
    x = df_by_rating_pd.polarity.loc[ratings]
    y = df_by_rating_pd.subjectivity.loc[ratings]
    plt.scatter(x, y)
    user_rating = "rating:" + str(df_by_rating_pd['rating'][idx])
    plt.text(x-.013, y+.002, user_rating, fontsize=10)
plt.title('Polarity and Subjectivity Scores by Ratings', fontsize=14)
plt.xlabel("[Polarity] Negative -------------------------------------------------- Positive", fontsize=14)
plt.ylabel("[Subjectivity] Facts --------------------------------------------- Opinions", fontsize=14)

# Save the figure before showing it
plt.savefig('polarity_subjectivity_by_ratings.png')  # Saves the plot as a PNG file

plt.show()

rating_3_pola = df_by_rating.filter(df_by_rating.rating == 2.0) \
                            .select('polarity') \
                            .collect()[0]['polarity']

df = df.withColumn('sentiment_score',
                   when(col('rating') == 1, 0) \
                    .when(col('rating') == 2, 0) \
                    .when((col('rating') == 3) & (col('polarity') < rating_3_pola), 0)
                    .when((col('rating') == 3) & (col('polarity') >= rating_3_pola), 1) \
                    .when(col('rating') == 4, 1) \
                    .when(col('rating') == 5, 1))

df = df.withColumn('sentiment',
                   when(col('sentiment_score') == 0, 'Negative')
                   .when(col('sentiment_score') == 1, 'Positive'))

df.show()
df.groupBy('sentiment_score').count().show()
df.groupBy('sentiment').count().show()

df = df.withColumn('words', split(col('text'), ' '))
df.show()

df_positive = df.filter(df['sentiment'] == 'Positive')
df_negative = df.filter(df['sentiment'] == 'Negative')

def topWordsOfSentiment(df):
    # Explode words into separate rows
    df_exploded = df.select(explode(col('words')).alias('word'))
    # df_exploded.show()

    # Count words
    df_word_count = df_exploded.groupBy('word').count()
    # df_word_count.show()

    # Sort words by count
    df_top_words = df_word_count.orderBy(col('count').desc()).limit(20)
    df_top_words.show()

    return df

topWordsOfSentiment(df_positive)
topWordsOfSentiment(df_negative)

# Define the path to the JSON file
json_file_path = '/content/drive/MyDrive/CS777FinalProject/Data/VideoGameProcessed/single_file/part-00000-b569cbab-0743-4611-8600-f2f072db3e69-c000.json'

# Initialize the line counter
line_count = 0

# Open the file and count the lines
try:
    with open(json_file_path, 'r') as file:
        for line in file:
            line_count += 1

    # Print the number of lines
    print(f"Number of lines in the file: {line_count}")

except FileNotFoundError:
    print(f"The file at path {json_file_path} was not found.")
except Exception as e:
    print(f"An error occurred: {e}")

